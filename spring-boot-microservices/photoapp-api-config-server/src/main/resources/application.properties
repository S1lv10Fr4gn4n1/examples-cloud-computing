# basic set up
spring.application.name = configuration-ws
server.port = 8012

#spring.profiles.active = native
#spring.cloud.config.server.native.search-locations = file://${user.home}/Development/cloud-computing/spring-boot-microservices/photoapp-properties

# setup configuration from where to fetch the remote configuration
spring.profiles.active = git
spring.cloud.config.server.git.uri = https://github.com/S1lv10Fr4gn4n1/photoapp-configuration
spring.cloud.config.server.git.username = s1lv10fr4gn4n1
spring.cloud.config.server.git.password = {cipher}f375b2a22aab2c3eae920bb765dce2c972ba0cca7eb3754c581d1e02ca00915f20ad73d18e87e6177d64a461a3e6bfdd29ead32fcf4970879fce6bc126476c80
spring.cloud.config.server.git.clone-on-start = true
spring.cloud.config.server.git.default-label = main

# expose the trigger to refresh the configuration
management.endpoints.web.exposure.include = bus-refresh, health

# setup connection with Rabbitmq
spring.rabbitmq.host = ${RABBITMQ_HOST:localhost}
spring.rabbitmq.port = 5672
spring.rabbitmq.username = guest
spring.rabbitmq.password = {cipher}207a9583bc595fed75be711d27d38f3000e33392a4ae7e28f0d1ab3a38068699

# setup log's output
logging.file = ./logs/${spring.application.name}-${CONTAINER_ID:dev}.log