# basic set up
server.port = 8082
spring.application.name = api-gateway
spring.devtools.restart.enabled = true

# Eureka discovery setup
eureka.client.serviceUrl.defaultZone = http://${EUREKA_SERVER:localhost}:8010/eureka
eureka.instance.instance-id = ${spring.application.name}:${spring.application.instance_id:${random.value}}

spring.cloud.gateway.routes[0].id = users-status-check
spring.cloud.gateway.routes[0].uri = lb://users-ws
spring.cloud.gateway.routes[0].predicates[0] = Path=/users-ws/users/status/check
spring.cloud.gateway.routes[0].predicates[1] = Method=GET
spring.cloud.gateway.routes[0].predicates[2] = Header=Authorization, Bearer (.*)
spring.cloud.gateway.routes[0].filters[0] = RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[0].filters[1] = RewritePath=/users-ws/(?<segment>.*), /$\{segment}
spring.cloud.gateway.routes[0].filters[2] = AuthorizationHeaderFilter

# this route doesn't need to check for jwt token because it's the point where it will create the user
spring.cloud.gateway.routes[1].id = users-ws
spring.cloud.gateway.routes[1].uri = lb://users-ws
spring.cloud.gateway.routes[1].predicates[0] = Path=/users-ws/users
spring.cloud.gateway.routes[1].predicates[1] = Method=POST
spring.cloud.gateway.routes[1].filters[0] = RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[1].filters[1] = RewritePath=/users-ws/(?<segment>.*), /$\{segment}

# this route doesn't need to check for valid Jwt token because it's here the jwt will be created
spring.cloud.gateway.routes[2].id = users-ws-login
spring.cloud.gateway.routes[2].uri = lb://users-ws
spring.cloud.gateway.routes[2].predicates[0] = Path=/users-ws/users/login
spring.cloud.gateway.routes[2].predicates[1] = Method=POST
spring.cloud.gateway.routes[2].filters[0] = RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[2].filters[1] = RewritePath=/users-ws/(?<segment>.*), /$\{segment}

# this route checks for the valid jwt token
spring.cloud.gateway.routes[3].id = users-ws-get-update-delete
spring.cloud.gateway.routes[3].uri = lb://users-ws
spring.cloud.gateway.routes[3].predicates[0] = Path=/users-ws/users/**
spring.cloud.gateway.routes[3].predicates[1] = Method=GET,PUT,DELETE
spring.cloud.gateway.routes[3].predicates[2] = Header=Authorization, Bearer (.*)
spring.cloud.gateway.routes[3].filters[0] = RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[3].filters[1] = AuthorizationHeaderFilter
spring.cloud.gateway.routes[3].filters[2] = RewritePath=/users-ws/(?<segment>.*), /$\{segment}

# this route enables the actuator for users-ws
spring.cloud.gateway.routes[4].id = users-ws-actuator-health
spring.cloud.gateway.routes[4].uri = lb://users-ws
spring.cloud.gateway.routes[4].predicates[0] = Path=/users-ws/actuator/health
spring.cloud.gateway.routes[4].predicates[1] = Method=GET
spring.cloud.gateway.routes[4].filters[0] = RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[4].filters[1] = RewritePath=/users-ws/(?<segment>.*), /$\{segment}

spring.cloud.gateway.routes[5].id = account-status-check
spring.cloud.gateway.routes[5].uri = lb://account-ws
spring.cloud.gateway.routes[5].predicates[0] = Path=/account-ws/account/status/check
spring.cloud.gateway.routes[5].predicates[1] = Method=GET
spring.cloud.gateway.routes[5].predicates[2] = Header=Authorization, Bearer (.*)
spring.cloud.gateway.routes[5].filters[0] = RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[5].filters[1] = RewritePath=/account-ws/(?<segment>.*), /$\{segment}
spring.cloud.gateway.routes[5].filters[2] = AuthorizationHeaderFilter

spring.cloud.gateway.routes[6].id = account-ws-actuator-health
spring.cloud.gateway.routes[6].uri = lb://account-ws
spring.cloud.gateway.routes[6].predicates[0] = Path=/account-ws/actuator/health
spring.cloud.gateway.routes[6].predicates[1] = Method=GET
spring.cloud.gateway.routes[6].filters[0] = RemoveRequestHeader=Cookie
spring.cloud.gateway.routes[6].filters[1] = RewritePath=/account-ws/(?<segment>.*), /$\{segment}

#spring.cloud.gateway.discovery.locator.enabled=true
#spring.cloud.gateway.discovery.locator.lower-case-service-id=true

# this secret needs to be the same as the one used to sign the jwt on users ws
#token.secret = 09123lksdf1923lskdjf99

# Rabbitmq connection setup
spring.rabbitmq.host = ${RABBITMQ_HOST:localhost}
spring.rabbitmq.port = 5672
#spring.rabbitmq.username = guest
#spring.rabbitmq.password = {cipher}207a9583bc595fed75be711d27d38f3000e33392a4ae7e28f0d1ab3a38068699


# https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html
# http://localhost:8082/actuator/gateway/routes
management.endpoints.web.exposure.include = health

# other filters
# - https://cloud.spring.io/spring-cloud-gateway/reference/html/#gatewayfilter-factories
# - https://cloud.spring.io/spring-cloud-gateway/reference/html/#global-filters
# - https://cloud.spring.io/spring-cloud-gateway/reference/html/#httpheadersfilters

# setup log's output
logging.file = ./logs/${spring.application.name}-${CONTAINER_ID:dev}.log